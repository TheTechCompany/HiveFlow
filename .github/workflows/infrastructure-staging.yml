name: HiveFlow Infrastructure

on:
  push:
    branches:
      - staging
      - next
      - master
    paths: ["packages/app/**", "packages/infrastructure/**", "packages/integrations/**"]

concurrency: hiveflow-infra-${{ github.ref }}

jobs:
  build_server:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            thetechcompany/hiveflow-backend
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push 
        id: docker_build
        uses: docker/build-push-action@v2
        with: 
          context: ./packages/app/hiveflow-backend
          file: ./packages/app/hiveflow-backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ENV=github
  
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  
  build_integration:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            thetechcompany/hiveflow-integration
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push 
        id: docker_build
        uses: docker/build-push-action@v2
        with: 
          context: ./packages/integrations/data-producer
          file: ./packages/integrations/data-producer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ENV=github
  
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  

  build_coreapps:
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        apps: [ frontend ]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - run: yarn

      - run: lerna bootstrap --scope @hive-flow/${{ matrix.apps }} --include-dependencies

      - run: echo "REACT_APP_URL=" >> $GITHUB_ENV

      - name: Setup stack
        run: |
          echo "PUBLIC_PATH=https://staging-apps.hexhive.io/${{matrix.apps}}/" >> $GITHUB_ENV
          echo "REACT_APP_API=https://staging-api.hexhive.io" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/staging' }}

      - name: Setup stack
        run: |
          echo "PUBLIC_PATH=https://next-apps.hexhive.io/${{matrix.apps}}/" >> $GITHUB_ENV
          echo "REACT_APP_API=https://next-api.hexhive.io" >> $GITHUB_ENV       
        if: ${{ github.ref == 'refs/heads/next' }}

      - name: Setup stack
        run: |
          echo "PUBLIC_PATH=https://apps.hexhive.io/${{matrix.apps}}/" >> $GITHUB_ENV
          echo "REACT_APP_API=https://api.hexhive.io" >> $GITHUB_ENV       
        if: ${{ github.ref == 'refs/heads/master' }}
        

      - name: Build web
        run: (export NODE_ENV=production CI=false; lerna run build --scope @hive-flow/${{ matrix.apps }} --include-dependencies)
      
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      
      - name: Setup stack
        run: |
          echo "BUCKET_URL=${{ secrets.STAGING_APP_BUCKET }}" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/staging' }}

      - name: Setup stack
        run: |
          echo "BUCKET_URL=${{ secrets.NEXT_APP_BUCKET }}" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/next' }}

      - name: Setup stack
        run: |
          echo "BUCKET_URL=${{ secrets.PROD_APP_BUCKET }}" >> $GITHUB_ENV  
        if: ${{ github.ref == 'refs/heads/master' }}
  
      - name: Upload new web-build
        run: |
          aws s3 sync packages/app/hiveflow-${{ matrix.apps }}/dist/ s3://${{ env.BUCKET_URL }}/hiveflow-${{matrix.apps}} --delete


  push_infra:
    name: Update Pulumi Infra
    runs-on: ubuntu-latest
    needs: [build_coreapps, build_server, build_integration]
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - run: echo "IMAGE_TAG=sha-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ap-southeast-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - run: yarn
        working-directory: ./packages/infrastructure

      - name: Setup stack
        run: |
          echo "STACK_NAME=ultraviolet/hiveflow-staging" >> $GITHUB_ENV
          echo "INTEGRATION_KEY=${{ secrets.STAGING_INTEGRATION_KEY }}" >> $GITHUB_ENV
          echo "ROOT_SERVER=${{ secrets.STAGING_API }}" >> $GITHUB_ENV
         
          echo "SQL_SERVER=${{secrets.SQL_SERVER}}" >> $GITHUB_ENV
          echo "SQL_USER=${{secrets.SQL_USER}}" >> $GITHUB_ENV
          echo "SQL_PASSWORD=${{secrets.SQL_PASSWORD}}" >> $GITHUB_ENV
          echo "SQL_DB=${{secrets.SQL_DB}}" >> $GITHUB_ENV
          echo "SQL_TRUST_CERT=${{secrets.SQL_TRUST_CERT}}" >> $GITHUB_ENV

        if: ${{ github.ref == 'refs/heads/staging' }}

      - name: Setup stack
        run: |
          echo "STACK_NAME=ultraviolet/hiveflow-next" >> $GITHUB_ENV
          echo "INTEGRATION_KEY=${{ secrets.STAGING_INTEGRATION_KEY }}" >> $GITHUB_ENV
          echo "ROOT_SERVER=${{ secrets.STAGING_API }}" >> $GITHUB_ENV
            
          echo "SQL_SERVER=${{secrets.SQL_SERVER}}" >> $GITHUB_ENV
          echo "SQL_USER=${{secrets.SQL_USER}}" >> $GITHUB_ENV
          echo "SQL_PASSWORD=${{secrets.SQL_PASSWORD}}" >> $GITHUB_ENV
          echo "SQL_DB=${{secrets.SQL_DB}}" >> $GITHUB_ENV
          echo "SQL_TRUST_CERT=${{secrets.SQL_TRUST_CERT}}" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/next' }}

      - name: Setup stack
        run: |
          echo "STACK_NAME=ultraviolet/hiveflow-prod" >> $GITHUB_ENV
          echo "INTEGRATION_KEY=${{ secrets.PROD_INTEGRATION_KEY }}" >> $GITHUB_ENV
          echo "ROOT_SERVER=${{ secrets.PROD_API }}" >> $GITHUB_ENV

          echo "SQL_SERVER=${{secrets.SQL_SERVER}}" >> $GITHUB_ENV
          echo "SQL_USER=${{secrets.SQL_USER}}" >> $GITHUB_ENV
          echo "SQL_PASSWORD=${{secrets.SQL_PASSWORD}}" >> $GITHUB_ENV
          echo "SQL_DB=${{secrets.SQL_DB}}" >> $GITHUB_ENV
          echo "SQL_TRUST_CERT=${{secrets.SQL_TRUST_CERT}}" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/master' }}
        
      - name: Update infrastructure
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: ${{ env.STACK_NAME }}
          work-dir: ./packages/infrastructure
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy-db:
    name: Deploy DB Migration
    runs-on: ubuntu-latest
    needs: [build_coreapps, build_server]
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}  
    steps: 
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - run: pulumi stack select ultraviolet/hiveflow-staging
        working-directory: ./packages/infrastructure

      - run: mkdir ~/.kube/

      - run: echo $(pulumi stack -s ultraviolet/apps/staging output kubeconfig) > ~/.kube/config.json
        working-directory: ./packages/infrastructure
        id: kube_config

      - name: Setup DB stack
        run: |
          echo "DB_NAME=ultraviolet/hexhive-db/db-staging" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/staging' }}

      - name: Setup stack
        run: |
          echo "DB_NAME=ultraviolet/hexhive-db/db-prod" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/next' }}

      - name: Setup stack
        run: |
          echo "DB_NAME=ultraviolet/hexhive-db/db-prod" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/master' }}
        
      - run: echo "::set-output name=postgres::$(pulumi stack -s ${{ env.DB_NAME }} output postgres_name)" 
        working-directory: ./packages/infrastructure
        id: postgres_url
      
      - run: echo "::set-output name=pass::$(pulumi stack -s ${{ env.DB_NAME }} output postgres_pass)" 
        working-directory: ./packages/infrastructure
        id: postgres_pass

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ap-southeast-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - uses: azure/setup-kubectl@v2.0
        with:
          version: "v1.23.5"
          
      - run: kubectl --kubeconfig ~/.kube/config.json port-forward service/${{ steps.postgres_url.outputs.postgres }} 5432:5432 &
      
      - run: sleep 30s

      - run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:${{ steps.postgres_pass.outputs.pass }}@localhost:5432/hiveflow
        working-directory: ./packages/app/hiveflow-backend/
