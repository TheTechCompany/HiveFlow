// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["interactiveTransactions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Project {
    id   String @id

    displayId String?

    colour String?

    name String?
    description String?

    schedule ScheduleItem[]
    timeline TimelineItem[] @relation(name: "projectTimeline")

    tasks ProjectTask[] @relation(name: "projectTasks")

    organisation String

    startDate DateTime?
    endDate   DateTime?
    status    String

    archived Boolean @default(false)

    @@unique([organisation, displayId])
}

model ProjectTask {
    id String @id

    title String
    description String?

    status String?

    project Project @relation(name: "projectTasks", fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    startDate DateTime?
    endDate   DateTime?

    timelineRank String?
    columnRank String?

    members String[]

    requiredSkills Json?

    createdBy String?

    dependencyOf ProjectTask[] @relation(name: "dependencyOf")
    dependencyOn ProjectTask[] @relation(name: "dependencyOf")

    lastUpdated DateTime?

    @@unique([projectId, id])
}

model Estimate {
    id           String   @id
    displayId    String? 
    
    name         String?
    status       String?

    date        DateTime?
    expiry      DateTime?

    lineItems   EstimateLineItem[] @relation(name: "hasLineItems")

    companyName  String?

    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now())

    terms       String?

    price        Float?
    
    organisation String

    tasks EstimateTask[] @relation(name: "estimateTasks")

    timeline TimelineItem[] @relation(name: "estimateTimeline")

    archived Boolean @default(false)

    @@unique([ displayId, organisation ])
}



model EstimateTask {
    id String @id

    title String
    description String?

    status String?

    estimate Estimate @relation(name: "estimateTasks", fields: [estimateId], references: [id], onDelete: Cascade)
    estimateId String

    startDate DateTime?
    endDate   DateTime?

    timelineRank String?
    columnRank String?

    members String[]

    createdBy String?

    dependencyOf EstimateTask[] @relation(name: "dependencyOfEstimateTask")
    dependencyOn EstimateTask[] @relation(name: "dependencyOfEstimateTask")

    lastUpdated DateTime?

    @@unique([estimateId, id])
}

model EstimateLineItem {
    id String @id

    order Int?

    item String?
    description String?
    quantity Float?
    price Float?

    estimate Estimate @relation(name: "hasLineItems", fields: [estimateId], references: [id])
    estimateId String
}

model Equipment {
    id           String @id
    displayId    String?
    name         String?
    registration String?

    schedule ScheduleItem[] @relation(name: "scheduleEquipment")

    organisation String

    @@unique([ displayId, organisation ])
}

model ScheduleItem {
    id String @id

    date      DateTime
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String

    people String[]
    equipment Equipment[] @relation(name: "scheduleEquipment")

    notes  String[]

	permissions ScheduleItemPermission[] @relation(name: "permissionsFor")

    owner String?

    createdAt DateTime @default(now())

    organisation String
}

model ScheduleItemPermission {
	id String @id

	owner String

	createdAt DateTime @default(now())

	scheduleItem ScheduleItem @relation(name: "permissionsFor", fields: [scheduleItemId], references: [id])
	scheduleItemId String

	@@unique([owner, scheduleItemId], name: "schedulePermitted")
}

// model Timeline {
// 	id String @id
// 	name String 

//     resources String[]

// 	items TimelineItem[] @relation("onTimeline")

// 	organisation String
// }

model TimelineItem {
	id String @id

    requires TimelineItem[] @relation(name: "blocksTimeline")
    blocks TimelineItem[] @relation(name: "blocksTimeline")

    rank String?

    estimate Estimate? @relation(name: "estimateTimeline", fields: [estimateId], references: [id])
    estimateId String?

    project Project? @relation(name: "projectTimeline", fields: [projectId], references: [id])
    projectId String?

    data Json?

	notes String?

	startDate DateTime
	endDate DateTime

    timeline String

    organisation String?
	// timeline Timeline @relation(name: "onTimeline", fields: [timelineId], references: [id], onDelete: Cascade)
	// timelineId String
}
// model TimelineItem {
// 	id String @id

//   timeline String
// 	startDate DateTime
// 	endDate DateTime
// 	notes String
// 	items TimelineItemItems[]
//   projectId String
// 	organisation String
// }

// model TimelineItemItems {
//   id String @id
//   name String
//   startDate DateTime
//   endDate DateTime
//   notes String
//   timelineItem TimelineItem @relation(fields: [timelineItemId], references: [id])
//   timelineItemId String
//   organisation String
// }


model CalendarItem {
    id String @id

    start DateTime
    end DateTime

    groupBy Json?

    data Json?

    comments CalendarItemComment[] @relation(name: "hasComment")

    permissions CalendarItemPermissions[] @relation(name: "hasPermissions")

    createdBy String?

    organisation String
}

model CalendarItemPermissions {
    id String @id

    user String

    permissions String[]

    item CalendarItem @relation(name: "hasPermissions", references: [id], fields: [itemId])
    itemId String

    createdAt DateTime @default(now())    
}

model CalendarItemComment {
    id String @id
    message String
    user String
    createdAt DateTime @default(now())

    item CalendarItem @relation(name: "hasComment", references: [id], fields: [itemId])
    itemId String
}

// model CalendarAnnotation {
//     id String @id
// }

model LeaveAssignment {
    id String @id

    user String

    start DateTime
    end DateTime

    createdAt DateTime @default(now())
    createdBy String

    organisation String?
}

model SkillAssignment {
    id String @id

    user String

    skill String

    skillData Json?

    organisation String

    created DateTime @default(now())

    @@unique([user, skill])
}